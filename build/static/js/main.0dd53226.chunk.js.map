{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/AccountSummary.js","components/Transaction.js","components/TransactionHistory.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transaction","transactions","filter","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","delTransaction","addTransaction","Balance","balance","useContext","map","transactionAmount","reduce","acc","item","toFixed","AccountSummary","transactionAmounts","income","expense","Math","abs","className","Transaction","sign","amount","transactionType","description","onClick","TransactionHistory","key","AddTransaction","useState","setDescription","setTransactionAmount","onSubmit","e","preventDefault","newTransaction","Date","getTime","htmlFor","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dd53226.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Expense Tracker\r\n        </h2>\r\n    )\r\n}\r\n","export default (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transaction: state.transactions\r\n                    .filter(transaction => transaction.id !== action.payload)\r\n\r\n            }\r\n\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload, ...state.transactions]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {createContext, useReducer} from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n    transaction: []\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    function delTransaction(id) {\r\n        dispatch(\r\n            {type: 'DELETE_TRANSACTION',\r\n            payload: id}\r\n        );\r\n    }\r\n\r\n    function addTransaction(transaction) {\r\n        dispatch(\r\n            {type: 'ADD_TRANSACTION',\r\n            payload: transaction}\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={\r\n            {\r\n            transactions: state.transactions,\r\n            delTransaction,\r\n            addTransaction\r\n            }\r\n        }>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n\r\nexport const Balance = () => {\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n    const transactionAmounts = transactions.map(transaction => transaction.transactionAmount);\r\n    const balance = transactionAmounts.reduce((acc, item) => (acc+=item), 0).toFixed(2);\r\n\r\n    return (\r\n        <div>\r\n            <h4>Current Balance</h4>\r\n            <h1 id='balance'>${balance}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AccountSummary = () => {\r\n\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n    const transactionAmounts = transactions.map(transaction => transaction.transactionAmount);\r\n\r\n    const income = transactionAmounts\r\n        .filter(transaction => transaction > 0)\r\n        .reduce((acc, transaction) => acc+=transaction, 0)\r\n        .toFixed(2);\r\n\r\n    const expense = Math.abs(transactionAmounts\r\n        .filter(transaction => transaction > 0)\r\n        .reduce((acc, transaction) => acc+=transaction, 0)\r\n        .toFixed(2));\r\n    \r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className='money plus'>\r\n                    +{income}\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className='money minus'>\r\n                    -{expense}\r\n                </p>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Transaction = ({transaction}) => {\r\n\r\n    const delTransaction = useContext(GlobalContext);\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n    const transactionType = transaction.transactionAmount > 0? \"plus\" : \"minus\";\r\n    return (\r\n        \r\n        <li className={transactionType}>\r\n            {transaction.description}\r\n            <span>{sign}${Math.abs(transaction.transactionAmount)}</span>\r\n            <button className='delete-btn'\r\n            onClick={() => delTransaction(transaction.id)}>X</button>\r\n        </li>\r\n        \r\n        \r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { Transaction } from './Transaction';\r\n\r\nexport const TransactionHistory = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div>\r\n            <h3>Transaction History</h3>\r\n            <ul className='list'>\r\n                {transactions.map(transaction =>(\r\n                    <Transaction key={transaction.id}\r\n                     transaction={transaction} />\r\n                        )\r\n                    )\r\n                }\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n\r\n    const[description, setDescription] = useState(\"\");\r\n    const [transactionAmount, setTransactionAmount] = useState(0);\r\n\r\n    const AddTransaction = useContext(GlobalContext);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const newTransaction = {\r\n            id: new Date().getTime(),\r\n            description,\r\n            transactionAmount: +transactionAmount\r\n        }\r\n        AddTransaction(newTransaction);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add New Transaction</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <div className='form-control'>\r\n                    <label htmlFor='description'>\r\n                        Description\r\n                    </label>\r\n                    <input type='text' id='description'\r\n                    placeholder='Detail of Transaction'\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)} />\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label htmlFor='transactionAmount'>\r\n                        Transaction Amount\r\n                    </label>\r\n                    <input type='number' id='transactionAmount'\r\n                    placeholder='Enter Transaction Amount'\r\n                    value={transactionAmount} \r\n                    onChange={(e) => setTransactionAmount(e.target.value)} />\r\n                </div>\r\n                <button className='btn'>\r\n                    Add Transaction\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { AccountSummary } from './components/AccountSummary';\nimport { TransactionHistory } from './components/TransactionHistory';\nimport { AddTransaction } from './components/AddTransaction';\nimport { GlobalProvider } from './context/GlobalState';\n\n\nfunction App() {\n  return (\n    <GlobalProvider>\n    <div>\n      <Header/>\n      <div className=\"container\">\n        <Balance/>\n        <AccountSummary/>\n        <TransactionHistory/>\n        <AddTransaction/>\n      </div>\n    </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}